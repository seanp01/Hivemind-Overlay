{"version":3,"file":"background.bundle.js","mappings":"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","sources":["webpack://hivemindoverlay/./src/llm/index.js","webpack://hivemindoverlay/webpack/bootstrap","webpack://hivemindoverlay/webpack/runtime/define property getters","webpack://hivemindoverlay/webpack/runtime/hasOwnProperty shorthand","webpack://hivemindoverlay/webpack/runtime/make namespace object","webpack://hivemindoverlay/./extension/background.js"],"sourcesContent":["class LLMService {\n    constructor(apiUrl = 'http://localhost:5000/predict') {\n        this.apiUrl = apiUrl;\n    }\n\n    async summarizeChat(chatBlocks) {\n        // Step 1: Get a summary for each chat block\n        const summaries = await Promise.all(\n            chatBlocks.map(block => this.callPredict(block))\n        );\n\n        // Step 2: Optionally, combine summaries and get a final summary\n        const combinedSummary = summaries.join('\\n');\n        const finalSummary = await this.callPredict(\n            `Summarize the following chat summaries:\\n${combinedSummary}`\n        );\n\n        return finalSummary;\n    }\n\n    createPrompt(chatBlocks) {\n        return `Summarize the following chat messages:\\n${chatBlocks.join('\\n')}`;\n    }\n\n    // Send a prompt to the local LLM server's /predict endpoint\n    async callPredict(prompt) {\n        const response = await fetch(this.apiUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ prompt })\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch summary from LLM API');\n        }\n\n        const data = await response.json();\n        // Adjust this if your Flask server returns a different field\n        return data.result || data.summary || '';\n    }\n}\n\nexport default LLMService;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import LLMService from '../src/llm/index.js';\n\n\n// background.js\nconst llm = new LLMService();\n\nchrome.runtime.onInstalled.addListener(() => {\n    console.log(\"HivemindOverlay extension installed.\");\n});\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === \"predict\") {\n        llm.call(request.prompt)\n            .then(summary => sendResponse({ result: summary }))\n            .catch(err => sendResponse({ result: \"Error: \" + err.message }));\n        return true; // Keep the message channel open for async response\n    }\n    if (request.action === \"summarizeChat\") {\n        llm.summarizeChat(request.chatBlocks)\n            .then(summary => sendResponse({ result: summary }))\n            .catch(err => sendResponse({ result: \"Error: \" + err.message }));\n        return true; // Keep the message channel open for async response\n    }\n});\n\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (\n        changeInfo.status === 'complete' &&\n        (\n            (tab.url && tab.url.match(/^https:\\/\\/www\\.twitch\\.tv\\/.*\\/chat/)) ||\n            (tab.url && tab.url.match(/^https:\\/\\/www\\.youtube\\.com\\/live_chat/))\n        )\n    ) {\n        chrome.scripting.executeScript({\n            target: { tabId },\n            files: ['content.bundle.js']\n        }, () => {\n            if (chrome.runtime.lastError) {\n                console.error(chrome.runtime.lastError.message);\n            } else {\n                console.log('content.bundle.js injected');\n                // Send the URL to the content script\n                chrome.tabs.sendMessage(tabId, { type: \"tabUrl\", url: tab.url });\n            }\n        });\n    }\n});"],"names":["LLMService","constructor","apiUrl","summarizeChat","chatBlocks","summaries","Promise","all","map","block","callPredict","combinedSummary","join","finalSummary","createPrompt","prompt","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","result","summary","llm","chrome","runtime","onInstalled","addListener","console","log","onMessage","request","sender","sendResponse","action","call","then","catch","err","message","tabs","onUpdated","tabId","changeInfo","tab","status","url","match","scripting","executeScript","target","files","lastError","error","sendMessage","type"],"sourceRoot":""}