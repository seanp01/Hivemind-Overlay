{"version":3,"file":"background.bundle.js","mappings":";;;;AAAA;AACAA,MAAM,CAACC,OAAO,CAACC,WAAW,CAACC,WAAW,CAAC,MAAM;EACzCC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;AACvD,CAAC,CAAC;AAEFL,MAAM,CAACM,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAC,CAACK,KAAK,EAAEC,UAAU,EAAEC,GAAG,KAAK;EAC1D,IACID,UAAU,CAACE,MAAM,KAAK,UAAU,IAE3BD,GAAG,CAACE,GAAG,IAAIF,GAAG,CAACE,GAAG,CAACC,KAAK,CAAC,sCAAsC;EAChE;EACA;EACH,EACH;IACEb,MAAM,CAACM,IAAI,CAACQ,WAAW,CAACN,KAAK,EAAE;MAAEO,IAAI,EAAE,QAAQ;MAAEH,GAAG,EAAEF,GAAG,CAACE;IAAI,CAAC,CAAC;EACpE;AACJ,CAAC,CAAC;AAEFZ,MAAM,CAACC,OAAO,CAACe,SAAS,CAACb,WAAW,CAAC,CAACc,OAAO,EAAEC,MAAM,EAAEC,YAAY,KAAK;EACpE,IAAIF,OAAO,CAACF,IAAI,KAAK,gBAAgB,EAAE;IACnC;IACAf,MAAM,CAACM,IAAI,CAACc,KAAK,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,EAAGhB,IAAI,IAAK;MAC/D,IAAIA,IAAI,CAACiB,MAAM,KAAK,CAAC,EAAE;QACnBJ,YAAY,CAAC;UAAEK,WAAW,EAAE;QAAkC,CAAC,CAAC;QAChE;MACJ;MACA,MAAMhB,KAAK,GAAGF,IAAI,CAAC,CAAC,CAAC,CAACmB,EAAE;MACxBzB,MAAM,CAACM,IAAI,CAACQ,WAAW,CAACN,KAAK,EAAE;QAAEO,IAAI,EAAE;MAAiB,CAAC,EAAGW,QAAQ,IAAK;QACrE,IAAIA,QAAQ,IAAIA,QAAQ,CAACF,WAAW,EAAE;UAClCL,YAAY,CAAC;YAAEK,WAAW,EAAEE,QAAQ,CAACF;UAAY,CAAC,CAAC;QACvD,CAAC,MAAM;UACHL,YAAY,CAAC;YAAEK,WAAW,EAAE;UAA8C,CAAC,CAAC;QAChF;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI,CAAC,CAAC;EACjB;AACJ,CAAC,CAAC,C","sources":["webpack://hivemindoverlay/./extension/background.js"],"sourcesContent":["// background.js\nchrome.runtime.onInstalled.addListener(() => {\n    console.log(\"HivemindOverlay extension installed.\");\n});\n\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n    if (\n        changeInfo.status === 'complete' &&\n        (\n            (tab.url && tab.url.match(/^https:\\/\\/www\\.twitch\\.tv\\/.*\\/chat/)) \n            // ||\n            // (tab.url && tab.url.match(/^https:\\/\\/www\\.youtube\\.com\\/live_chat/))\n        )\n    ) {\n        chrome.tabs.sendMessage(tabId, { type: \"tabUrl\", url: tab.url });\n    }   \n});\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === 'requestOverlay') {\n        // Find the active tab in the current window\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            if (tabs.length === 0) {\n                sendResponse({ overlayHtml: \"<div>No active tab found.</div>\" });\n                return;\n            }\n            const tabId = tabs[0].id;\n            chrome.tabs.sendMessage(tabId, { type: \"getOverlayHtml\" }, (response) => {\n                if (response && response.overlayHtml) {\n                    sendResponse({ overlayHtml: response.overlayHtml });\n                } else {\n                    sendResponse({ overlayHtml: \"<div>Failed to fetch overlay content.</div>\" });\n                }\n            });\n        });\n        return true; // Keep the message channel open for async response\n    }\n});"],"names":["chrome","runtime","onInstalled","addListener","console","log","tabs","onUpdated","tabId","changeInfo","tab","status","url","match","sendMessage","type","onMessage","message","sender","sendResponse","query","active","currentWindow","length","overlayHtml","id","response"],"sourceRoot":""}